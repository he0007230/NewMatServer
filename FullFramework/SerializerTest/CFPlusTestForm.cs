// This is a part of DotNetRemoting Library
// Copyright (C) 2002-2006 Amplefile
// All rights reserved.
//
// This source code can be used, distributed or modified
// only under terms and conditions 
// of the accompanying license agreement.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using CompactFormatter;
using System.IO;
using System.Collections;
using DotNetRemoting;

namespace SerTest
{
    public partial class CFPlusTestForm : Form
    {
        public CFPlusTestForm()
        {
            InitializeComponent();
        }
        
        /// <summary>
        /// sample object with Fast Serializer generated by Serialization Studio
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_ser_Click(object sender, EventArgs e)
        {
            // create CompactFormatterPlus
            CompactFormatterPlus MyCompFormatter = new CompactFormatterPlus();

            // create fast serializer generated by Serialization Studio
            FSDefault fastserializer = new FSDefault();

            // Register fast serializer with CompactFormatterPlus
            MyCompFormatter.AddFastSerializer(fastserializer);

            // object to serialize
            ComplexObject co = new ComplexObject();

            co._SomeArrayList = new ArrayList();
            co._SomeArrayList.Add("zsdzsdadada");

            MemoryStream ms = new MemoryStream();
            MyCompFormatter.Serialize(ms, co);
            ms.Position = 0;

            // create CompactFormatterPlus 
            CompactFormatterPlus cf2 = new CompactFormatterPlus();

            // create fast serializer generated by Serialization Studio
            FSDefault fs2 = new FSDefault();

            // Register fast serializer with CompactFormatterPlus
            cf2.AddFastSerializer(fs2);

            // deserialize
            object ob2 = cf2.Deserialize(ms);

            label_stat.Text = "Status: object deserialized";
        }

        /// <summary>
        /// DataSet serialization
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_ds_Click(object sender, EventArgs e)
        {
            DataSet ds = DataCreator.CreateDataSet(100);
            CompactFormatterPlus MyCompFormatter = new CompactFormatterPlus();
            MemoryStream ms = new MemoryStream();
            MyCompFormatter.Serialize(ms, ds);
            ms.Position = 0;
            object obj = MyCompFormatter.Deserialize(ms);
            label_stat.Text = "Status: dataset deserialized";
        }

        /// <summary>
        /// sample object serialize/deserialize
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_myobj_Click(object sender, EventArgs e)
        {
            MyObject mo = new MyObject();

            mo.f = (float)445454.34;
            mo.Ht = new Hashtable();
            mo.Ht["hello"] = 1311;
            mo.SomeArrayList = new ArrayList();
            mo.SomeArrayList.Add(878788);
            mo.stringlist = new List<string>();
            mo.stringlist.Add("243242424242");
            mo.stringdict = new Dictionary<string, string>();
            mo.stringdict["abc"] = "ABC";

            CompactFormatterPlus MyCompFormatter = new CompactFormatterPlus();
            MemoryStream ms = new MemoryStream();
            MyCompFormatter.Serialize(ms, mo);
            ms.Position = 0;
            object obj = MyCompFormatter.Deserialize(ms);
            label_stat.Text = "Status: MyObject deserialized";
        }

        /// <summary>
        /// class with inheritance
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_inher_Click(object sender, EventArgs e)
        {
            Inheritance2 inh = new Inheritance2();

            inh.f = (float)445454.34;
            inh.Ht = new Hashtable();
            inh.Ht["hello"] = 1311;
            inh.SomeArrayList = new ArrayList();
            inh.SomeArrayList.Add(878788);
            inh.StringProp = "by";
            inh.stringlist = new List<string>();
            inh.stringlist.Add("243242424242");
            inh.stringdict = new Dictionary<string, string>();
            inh.stringdict["abc"] = "ABC";

            inh.Items = new ArrayList(new string[] { "12", "34"});
            inh.StringProp1 = "hello";

            CompactFormatterPlus MyCompFormatter = new CompactFormatterPlus();

            // only serializable objects to be serialized . Uncomment if you need that
            //MyCompFormatter.CheckSerializableAtribute = true;

            MemoryStream ms = new MemoryStream();
            MyCompFormatter.Serialize(ms, inh);
            ms.Position = 0;
            object obj = MyCompFormatter.Deserialize(ms);
            label_stat.Text = "Status: object with inheritance deserialized";
        }
    }
}