/*******************************************************************************
 *
 *	this code was generated by Serialization Studio
 *	http://DotNetRemoting.com
 *	Amplefile 2002-2007
 *
 ********************************************************************************/
using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Reflection;

namespace DotNetRemoting
{
enum ObjType
{
	FROMSTRTYPE,
	GENERIC,
	NULL,
	System_Object,
	ARRAY,
	DotNetRemoting_status,
	DotNetRemoting_commands,
	DotNetRemoting_stat_type,
	System_Collections_ArrayList,
	System_String,
	System_DateTime,
	System_Int32,
	DotNetRemoting_ComplexObject,
	System_Boolean,
	System_Byte,
	DotNetRemoting_DrawingObject,
	DotNetRemoting_SerializerSetObject,
	DotNetRemoting_SyncCommsObject,
	DotNetRemoting_RpcObject,
	DotNetRemoting_ConnectionAliveObject,
	DotNetRemoting_GenericObject
};

public class FSDefault : IFastSerializer
{

	#region Standard
	class FromStrType {}

	FSBinWriter BW;
	FSBinReader BR;

	BindingFlags BindFlags = BindingFlags.FlattenHierarchy | BindingFlags.NonPublic |
	                         BindingFlags.Public | BindingFlags.Instance;
	Type LastType = null;
	ObjType LastEnum;

    IDNR_Formatter _DNR_Formatter;

	public FSDefault()
	{
	}

    public IDNR_Formatter GenericFormatter
    {
        get{return _DNR_Formatter;}
        set{_DNR_Formatter = value;}
    }

	public string Name
	{
		get{return "FSDefault";}
	}

	public Type[] GetTypes()
	{
		ArrayList Types = new ArrayList();
		for (int i = 5; ; i++)
		{
			Type t2 = GetTypeFromEnum((byte)i);
			if (t2 == null)
				break;
			Types.Add(t2);
		}
		Types.Remove(typeof(System.Array));
		return (Type[])Types.ToArray(typeof(Type));
	}

	public void Serialize(Stream s, object Obj)
	{
		BW = new FSBinWriter(s);
		SerializeUnknown(Obj);
	}

	public object Deserialize(Stream s)
	{
		BR = new FSBinReader(s);
		return DeSerializeUnknown();
	}

	void Serialize(object Obj, Type t, string FieldName)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.GENERIC);

		BW.Write(FieldName);
		object ObIntern = t.GetField(FieldName, BindFlags).GetValue(Obj);

		SerializeUnknown(ObIntern);
	}

	void Deserialize(object Obj, Type t)
	{
		ObjType TypeEnum = (ObjType)BR.ReadByte();
		if (TypeEnum == ObjType.NULL)
			return;

		string FieldName = BR.ReadString();

		object ObIntern = DeSerializeUnknown();
		t.GetField(FieldName, BindFlags).SetValue(Obj, ObIntern);
	}

	object DeSerializeArray()
	{
		ObjType TypeEnum = (ObjType)BR.ReadByte();

		Type t = null;

		if (TypeEnum == ObjType.FROMSTRTYPE)
		{
			string TypeName = BR.ReadString();
			t = Type.GetType(TypeName, true);
		}
		else
		{
			t = GetTypeFromEnum((byte)TypeEnum);
		}

		int Len = BR.ReadInt32();

		System.Array Arr = Array.CreateInstance(t, Len);
		for (int i = 0; i < Len; i++)
		{
			object ob = DeSerializeUnknown();
			Arr.SetValue(ob, i);
		}
		return Arr;
	}

	void SerializeArray(object ArrayObj)
	{

		ICollection ic = (ICollection)ArrayObj;
		Type ElemType = ArrayObj.GetType().GetElementType();
		ObjType ob_type = GetEnumFromType(ElemType);

		if (ob_type == ObjType.FROMSTRTYPE)
		{
			BW.Write(ElemType.ToString());
		}

		BW.Write((byte)ob_type);
		BW.Write((int)ic.Count);
		foreach (object Obj in ic)
		{
			SerializeUnknown(Obj);
		}
	}

	void Serialize(System.Object Obj)
	{
		if (Obj != null)
		{
			BW.Write((byte)ObjType.System_Object);
		}
		else
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		SerializeUnknown(Obj);
	}

	void Deserialize(ref System.Object obj)
	{
		byte b = BR.ReadByte();

		if (b == (byte)ObjType.NULL)
		{
			obj = null;
			return;
		}

		obj = DeSerializeUnknown();
	}

    void SerializeGeneric(object Obj)
    {
        if (_DNR_Formatter == null)
            throw new Exception("SerializeGeneric:Generic serializer not set");

        if (Obj == null)
        {
            BW.Write((byte)ObjType.NULL);
            return;
        }
        else
        {
            BW.Write((byte)ObjType.GENERIC);
        }

        try
        {
            MemoryStream ms = new MemoryStream();
            _DNR_Formatter.Serialize(ms, Obj);
            int Size = (int)ms.Position;
            BW.Write((int)Size);
            BW.Write(ms.ToArray(), 0, Size);
        }
        catch (Exception ex)
        {
            throw new Exception("SerializeGeneric:error-" + ex.Message);
        }
    }

    object DeSerializeGeneric()
    {
        if (_DNR_Formatter == null)
            throw new Exception("SerializeGeneric:Generic serializer not set");
        try
        {
            ObjType TypeEnum = (ObjType)BR.ReadByte();
            if (TypeEnum == ObjType.NULL)
                return null;

            int Size = BR.ReadInt32();
            byte[] buff = new byte[Size];
            BR.Read(buff, 0, Size);
            MemoryStream ms = new MemoryStream(buff);
            return _DNR_Formatter.Deserialize(ms);
        }
        catch (Exception ex)
        {
            throw new Exception("DeSerializeGeneric:error-" + ex.Message);
        }
    }

	//*************************************************************************

	#endregion


	void Serialize(DotNetRemoting.status[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_status);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.status ElemObj in Obj)
		{
			BW.Write((Int32)ElemObj);
		}
	}

	void Serialize(DotNetRemoting.commands[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_commands);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.commands ElemObj in Obj)
		{
			BW.Write((Int32)ElemObj);
		}
	}

	void Serialize(DotNetRemoting.stat_type[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_stat_type);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.stat_type ElemObj in Obj)
		{
			BW.Write((Int32)ElemObj);
		}
	}

	void Serialize(System.Collections.ArrayList[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.System_Collections_ArrayList);
		BW.Write((int)Obj.Length);

		foreach (System.Collections.ArrayList ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(ArrayList al)
	{
		if (al != null)
		{
			BW.Write((byte)ObjType.System_Object);
		}
		else
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((int)al.Count);
		BW.Write(al.Capacity);
		for(int i = 0; i < al.Count; i++)
		{
			SerializeUnknown(al[i]);
		}
	}

	void Serialize(System.String[] Obj)
	{
		if (Obj == null)
		{
			BW.Write(-1);
			return;
		}

		BW.Write(Obj.Length);

		for (int i = 0; i < Obj.Length; i++)
		{
			BW.Write(Obj[i]);
		}
	}

	void Serialize(System.DateTime[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.System_DateTime);
		BW.Write((int)Obj.Length);

		foreach (System.DateTime ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}
	void Serialize(DateTime dt)
	{
		BW.Write((long)dt.Ticks);
	}

	void Serialize(System.Int32[] Obj)
	{
		if (Obj == null)
		{
			BW.Write(-1);
			return;
		}

		BW.Write(Obj.Length);
		int BytesToWrite = Obj.Length << 2;
		BW.WriteGenericArray(Obj, 0, BytesToWrite);
	}

	void Serialize(DotNetRemoting.ComplexObject[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_ComplexObject);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.ComplexObject ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(DotNetRemoting.ComplexObject Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}
		else
		{
			BW.Write((byte)ObjType.DotNetRemoting_ComplexObject);
		}

		Serialize((System.Collections.ArrayList)Obj._SomeArrayList); // m12

		BW.Write(Obj._SomeString);

		Serialize((System.DateTime)Obj._SomeDateTime); // m12

		BW.Write(Obj._SomeInt);
	}

	void Serialize(System.Boolean[] Obj)
	{
		if (Obj == null)
		{
			BW.Write(-1);
			return;
		}

		BW.Write(Obj.Length);
		int BytesToWrite = Obj.Length;
		BW.WriteGenericArray(Obj, 0, BytesToWrite);
	}

	void Serialize(System.Byte[] Obj)
	{
		if (Obj == null)
		{
			BW.Write(-1);
			return;
		}

		BW.Write(Obj.Length);
		int BytesToWrite = Obj.Length;
		BW.WriteGenericArray(Obj, 0, BytesToWrite);
	}

	void Serialize(DotNetRemoting.DrawingObject[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_DrawingObject);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.DrawingObject ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(DotNetRemoting.DrawingObject Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}
		else
		{
			BW.Write((byte)ObjType.DotNetRemoting_DrawingObject);
		}

		BW.Write(Obj.Start);

		BW.Write(Obj.Color);

		BW.Write(Obj.X);

		BW.Write(Obj.Y);
	}

	void Serialize(DotNetRemoting.SerializerSetObject[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_SerializerSetObject);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.SerializerSetObject ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(DotNetRemoting.SerializerSetObject Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}
		else
		{
			BW.Write((byte)ObjType.DotNetRemoting_SerializerSetObject);
		}

		BW.Write(Obj.FormatterName);

		Serialize(Obj.EncryptorsNames);

		Serialize(Obj.EncryptorsIndexes);

		BW.Write(Obj.KeepConnectionAlivePeriod);
	}

	void Serialize(System.Object[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.System_Object);
		BW.Write((int)Obj.Length);

		foreach (System.Object ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(DotNetRemoting.SyncCommsObject[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_SyncCommsObject);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.SyncCommsObject ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(DotNetRemoting.SyncCommsObject Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}
		else
		{
			BW.Write((byte)ObjType.DotNetRemoting_SyncCommsObject);
		}

		BW.Write(Obj.WithExecution);

		BW.Write((Int32)Obj.Command);

		BW.Write(Obj.ClientID);

		BW.Write(Obj.CodeMessage);

		BW.Write(Obj.Message);

		Serialize((System.Object)Obj.InObject); // m12

		Serialize((System.Object)Obj.OutObject); // m12

		Serialize((System.Object)Obj.Tag); // m12
	}

	void Serialize(DotNetRemoting.RpcObject[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_RpcObject);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.RpcObject ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(DotNetRemoting.RpcObject Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}
		else
		{
			BW.Write((byte)ObjType.DotNetRemoting_RpcObject);
		}

		BW.Write(Obj.CommandID);

		BW.Write(Obj.MethodName);

		BW.Write(Obj.ClassName);

		Serialize(Obj.Args);

		Serialize((System.Object)Obj.OutObject); // m12
	}

	void Serialize(DotNetRemoting.ConnectionAliveObject[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_ConnectionAliveObject);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.ConnectionAliveObject ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(DotNetRemoting.ConnectionAliveObject Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}
		else
		{
			BW.Write((byte)ObjType.DotNetRemoting_ConnectionAliveObject);
		}

		BW.Write(Obj.CodeMessage);

		Serialize((System.Object)Obj.Tag); // m12
	}

	void Serialize(DotNetRemoting.GenericObject[] Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		BW.Write((byte)ObjType.DotNetRemoting_GenericObject);
		BW.Write((int)Obj.Length);

		foreach (DotNetRemoting.GenericObject ElemObj in Obj)
		{
			Serialize(ElemObj);
		}
	}

	void Serialize(DotNetRemoting.GenericObject Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}
		else
		{
			BW.Write((byte)ObjType.DotNetRemoting_GenericObject);
		}

		BW.Write(Obj.Mess);

		Serialize((System.Object)Obj.Obj); // m12

		BW.Write(Obj.ID);

		BW.Write(Obj.Port);
	}

	void Deserialize(ref DotNetRemoting.status[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.status[Len];

		for(int i = 0; i < Len; i++)
		{
			BR.ReadInt32();
		}
	}

	void Deserialize(ref DotNetRemoting.commands[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.commands[Len];

		for(int i = 0; i < Len; i++)
		{
			BR.ReadInt32();
		}
	}

	void Deserialize(ref DotNetRemoting.stat_type[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.stat_type[Len];

		for(int i = 0; i < Len; i++)
		{
			BR.ReadInt32();
		}
	}

	void Deserialize(ref System.Collections.ArrayList[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new System.Collections.ArrayList[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new System.Collections.ArrayList();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref ArrayList Al)
	{
		byte b = BR.ReadByte();

		if (b == (byte)ObjType.NULL)
		{
			Al = null;
			return;
		}

		if (Al == null)
		{
			Al = new ArrayList();
		}

		int Count = BR.ReadInt32();
		Al.Capacity = BR.ReadInt32();
		for(int i = 0; i < Count; i++)
		{
			object ob = DeSerializeUnknown();
			Al.Add(ob);
		}
	}

	void Deserialize(ref string[] StrArr)
	{
		int length = BR.ReadInt32();
		if (length == -1)
			return;

		StrArr = new string[length];
		for (int i = 0; i < length; i++)
		{
			StrArr[i] = BR.ReadString();
		}
	}

	void Deserialize(ref System.DateTime[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new System.DateTime[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new System.DateTime();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DateTime dt)
	{
		long Ticks = BR.ReadInt64();
		dt = new DateTime(Ticks);
	}

	void Deserialize(ref System.Int32[] iarr)
	{
		int length = BR.ReadInt32();
		if (length == -1)
		{
			iarr = null;
			return;
		}
		iarr = new System.Int32[length];
		int BytesToRead = length << 2;
		BR.ReadGenericArray(iarr, BytesToRead);
	}

	void Deserialize(ref DotNetRemoting.ComplexObject[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.ComplexObject[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new DotNetRemoting.ComplexObject();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DotNetRemoting.ComplexObject Obj)
	{
		if ((ObjType)BR.ReadByte() == ObjType.NULL)
		{
			Obj = null; //v2
			return;
		}

		{ // m55
			System.Collections.ArrayList TempObj = (System.Collections.ArrayList)Obj._SomeArrayList;
			Deserialize(ref TempObj);
			Obj._SomeArrayList = (System.Collections.ArrayList)TempObj;
		}
		Obj._SomeString = BR.ReadString();
		{ // m55
			System.DateTime TempObj = (System.DateTime)Obj._SomeDateTime;
			Deserialize(ref TempObj);
			Obj._SomeDateTime = (System.DateTime)TempObj;
		}
		Obj._SomeInt = BR.ReadInt32();
	}

	void Deserialize(ref System.Boolean[] iarr)
	{
		int length = BR.ReadInt32();
		if (length == -1)
		{
			iarr = null;
			return;
		}
		iarr = new System.Boolean[length];
		int BytesToRead = length;
		BR.ReadGenericArray(iarr, BytesToRead);
	}

	void Deserialize(ref System.Byte[] iarr)
	{
		int length = BR.ReadInt32();
		if (length == -1)
		{
			iarr = null;
			return;
		}
		iarr = new System.Byte[length];
		int BytesToRead = length;
		BR.ReadGenericArray(iarr, BytesToRead);
	}

	void Deserialize(ref DotNetRemoting.DrawingObject[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.DrawingObject[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new DotNetRemoting.DrawingObject();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DotNetRemoting.DrawingObject Obj)
	{
		if ((ObjType)BR.ReadByte() == ObjType.NULL)
		{
			Obj = null; //v2
			return;
		}

		Obj.Start = BR.ReadBoolean();
		Obj.Color = BR.ReadByte();
		Obj.X = BR.ReadByte();
		Obj.Y = BR.ReadByte();
	}

	void Deserialize(ref DotNetRemoting.SerializerSetObject[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.SerializerSetObject[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new DotNetRemoting.SerializerSetObject();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DotNetRemoting.SerializerSetObject Obj)
	{
		if ((ObjType)BR.ReadByte() == ObjType.NULL)
		{
			Obj = null; //v2
			return;
		}

		Obj.FormatterName = BR.ReadString();
		{
			//dbg 2
			System.String[] temp_obj = (System.String[])Obj.EncryptorsNames;
			Deserialize(ref temp_obj);
			Obj.EncryptorsNames = temp_obj;
		}

		{
			//dbg 2
			System.Byte[] temp_obj = (System.Byte[])Obj.EncryptorsIndexes;
			Deserialize(ref temp_obj);
			Obj.EncryptorsIndexes = temp_obj;
		}

		Obj.KeepConnectionAlivePeriod = BR.ReadInt32();
	}

	void Deserialize(ref System.Object[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new System.Object[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new System.Object();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DotNetRemoting.SyncCommsObject[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.SyncCommsObject[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new DotNetRemoting.SyncCommsObject();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DotNetRemoting.SyncCommsObject Obj)
	{
		if ((ObjType)BR.ReadByte() == ObjType.NULL)
		{
			Obj = null; //v2
			return;
		}

		Obj.WithExecution = BR.ReadBoolean();
		Obj.Command = (DotNetRemoting.commands)BR.ReadInt32();

		Obj.ClientID = BR.ReadInt32();
		Obj.CodeMessage = BR.ReadString();
		Obj.Message = BR.ReadString();
		{ // m55
			System.Object TempObj = (System.Object)Obj.InObject;
			Deserialize(ref TempObj);
			Obj.InObject = (System.Object)TempObj;
		}
		{ // m55
			System.Object TempObj = (System.Object)Obj.OutObject;
			Deserialize(ref TempObj);
			Obj.OutObject = (System.Object)TempObj;
		}
		{ // m55
			System.Object TempObj = (System.Object)Obj.Tag;
			Deserialize(ref TempObj);
			Obj.Tag = (System.Object)TempObj;
		}
	}

	void Deserialize(ref DotNetRemoting.RpcObject[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.RpcObject[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new DotNetRemoting.RpcObject();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DotNetRemoting.RpcObject Obj)
	{
		if ((ObjType)BR.ReadByte() == ObjType.NULL)
		{
			Obj = null; //v2
			return;
		}

		Obj.CommandID = BR.ReadInt32();
		Obj.MethodName = BR.ReadString();
		Obj.ClassName = BR.ReadString();
		{
			//dbg 2
			System.Object[] temp_obj = (System.Object[])Obj.Args;
			Deserialize(ref temp_obj);
			Obj.Args = temp_obj;
		}

		{ // m55
			System.Object TempObj = (System.Object)Obj.OutObject;
			Deserialize(ref TempObj);
			Obj.OutObject = (System.Object)TempObj;
		}
	}

	void Deserialize(ref DotNetRemoting.ConnectionAliveObject[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.ConnectionAliveObject[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new DotNetRemoting.ConnectionAliveObject();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DotNetRemoting.ConnectionAliveObject Obj)
	{
		if ((ObjType)BR.ReadByte() == ObjType.NULL)
		{
			Obj = null; //v2
			return;
		}

		Obj.CodeMessage = BR.ReadString();
		{ // m55
			System.Object TempObj = (System.Object)Obj.Tag;
			Deserialize(ref TempObj);
			Obj.Tag = (System.Object)TempObj;
		}
	}

	void Deserialize(ref DotNetRemoting.GenericObject[] Obj)
	{
		ObjType ot = (ObjType)BR.ReadByte();

		if (ot == ObjType.NULL)
		{
			Obj = null;
			return;
		}

		int Len = BR.ReadInt32();

		Obj = new DotNetRemoting.GenericObject[Len];

		for(int i = 0; i < Len; i++)
		{
			{        //m1
				Obj[i] = new DotNetRemoting.GenericObject();
				Deserialize(ref Obj[i]);
			}
		}
	}

	void Deserialize(ref DotNetRemoting.GenericObject Obj)
	{
		if ((ObjType)BR.ReadByte() == ObjType.NULL)
		{
			Obj = null; //v2
			return;
		}

		Obj.Mess = BR.ReadString();
		{ // m55
			System.Object TempObj = (System.Object)Obj.Obj;
			Deserialize(ref TempObj);
			Obj.Obj = (System.Object)TempObj;
		}
		Obj.ID = BR.ReadInt32();
		Obj.Port = BR.ReadInt32();
	}

	ObjType GetEnumFromType(Type t)
	{
		if (t == null)
			return ObjType.NULL;

		if (t.IsArray)
			return ObjType.ARRAY;

		string Str = t.ToString();

		Type InterfaceType = null;



		switch(Str)
		{
		case "System.Object":
			return ObjType.System_Object;
		case "DotNetRemoting.status":
			return ObjType.DotNetRemoting_status;
		case "DotNetRemoting.commands":
			return ObjType.DotNetRemoting_commands;
		case "DotNetRemoting.stat_type":
			return ObjType.DotNetRemoting_stat_type;
		case "System.Collections.ArrayList":
			return ObjType.System_Collections_ArrayList;
		case "System.String":
			return ObjType.System_String;
		case "System.DateTime":
			return ObjType.System_DateTime;
		case "System.Int32":
			return ObjType.System_Int32;
		case "DotNetRemoting.ComplexObject":
			return ObjType.DotNetRemoting_ComplexObject;
		case "System.Boolean":
			return ObjType.System_Boolean;
		case "System.Byte":
			return ObjType.System_Byte;
		case "DotNetRemoting.DrawingObject":
			return ObjType.DotNetRemoting_DrawingObject;
		case "DotNetRemoting.SerializerSetObject":
			return ObjType.DotNetRemoting_SerializerSetObject;
		case "DotNetRemoting.SyncCommsObject":
			return ObjType.DotNetRemoting_SyncCommsObject;
		case "DotNetRemoting.RpcObject":
			return ObjType.DotNetRemoting_RpcObject;
		case "DotNetRemoting.ConnectionAliveObject":
			return ObjType.DotNetRemoting_ConnectionAliveObject;
		case "DotNetRemoting.GenericObject":
			return ObjType.DotNetRemoting_GenericObject;
		}
		return ObjType.GENERIC;
	}

	Type GetTypeFromEnum(byte Enum)
	{
		ObjType obType = (ObjType)Enum;

		switch(obType)
		{
		case ObjType.GENERIC:
		case ObjType.NULL:
			return null;
		case ObjType.System_Object:
			return typeof(object);
		case ObjType.DotNetRemoting_status:
			return typeof(DotNetRemoting.status);
		case ObjType.DotNetRemoting_commands:
			return typeof(DotNetRemoting.commands);
		case ObjType.DotNetRemoting_stat_type:
			return typeof(DotNetRemoting.stat_type);
		case ObjType.System_Collections_ArrayList:
			return typeof(System.Collections.ArrayList);
		case ObjType.System_String:
			return typeof(System.String);
		case ObjType.System_DateTime:
			return typeof(System.DateTime);
		case ObjType.System_Int32:
			return typeof(System.Int32);
		case ObjType.DotNetRemoting_ComplexObject:
			return typeof(DotNetRemoting.ComplexObject);
		case ObjType.System_Boolean:
			return typeof(System.Boolean);
		case ObjType.System_Byte:
			return typeof(System.Byte);
		case ObjType.DotNetRemoting_DrawingObject:
			return typeof(DotNetRemoting.DrawingObject);
		case ObjType.DotNetRemoting_SerializerSetObject:
			return typeof(DotNetRemoting.SerializerSetObject);
		case ObjType.DotNetRemoting_SyncCommsObject:
			return typeof(DotNetRemoting.SyncCommsObject);
		case ObjType.DotNetRemoting_RpcObject:
			return typeof(DotNetRemoting.RpcObject);
		case ObjType.DotNetRemoting_ConnectionAliveObject:
			return typeof(DotNetRemoting.ConnectionAliveObject);
		case ObjType.DotNetRemoting_GenericObject:
			return typeof(DotNetRemoting.GenericObject);
		}
		return null;
	}

	void SerializeUnknown(object Obj)
	{
		if (Obj == null)
		{
			BW.Write((byte)ObjType.NULL);
			return;
		}

		ObjType obTypeEnum = ObjType.NULL;

		Type t = Obj.GetType();

		if (t == LastType)
		{
			obTypeEnum = LastEnum;
		}
		else
		{
			obTypeEnum = GetEnumFromType(Obj.GetType());
			LastEnum = obTypeEnum;
			LastType = t;
		}

		BW.Write((byte)obTypeEnum);

		switch(obTypeEnum)
		{
		case ObjType.ARRAY:
			SerializeArray(Obj);
			return;
		case ObjType.System_Object:
			SerializeUnknown(Obj);
			return;
        case ObjType.GENERIC:
            SerializeGeneric(Obj);
            return;
		case ObjType.DotNetRemoting_status:
			BW.Write((Int32)Obj);
			return;
		case ObjType.DotNetRemoting_commands:
			BW.Write((Int32)Obj);
			return;
		case ObjType.DotNetRemoting_stat_type:
			BW.Write((Int32)Obj);
			return;
		case ObjType.System_Collections_ArrayList:
			Serialize((System.Collections.ArrayList)Obj);
			return;
		case ObjType.System_String:
			BW.Write((System.String)Obj);
			return;
		case ObjType.System_DateTime:
			Serialize((System.DateTime)Obj);
			return;
		case ObjType.System_Int32:
			BW.Write((System.Int32)Obj);
			return;
		case ObjType.DotNetRemoting_ComplexObject:
			Serialize((DotNetRemoting.ComplexObject)Obj); // ?2
			return;
		case ObjType.System_Boolean:
			BW.Write((System.Boolean)Obj);
			return;
		case ObjType.System_Byte:
			BW.Write((System.Byte)Obj);
			return;
		case ObjType.DotNetRemoting_DrawingObject:
			Serialize((DotNetRemoting.DrawingObject)Obj); // ?2
			return;
		case ObjType.DotNetRemoting_SerializerSetObject:
			Serialize((DotNetRemoting.SerializerSetObject)Obj); // ?2
			return;
		case ObjType.DotNetRemoting_SyncCommsObject:
			Serialize((DotNetRemoting.SyncCommsObject)Obj); // ?2
			return;
		case ObjType.DotNetRemoting_RpcObject:
			Serialize((DotNetRemoting.RpcObject)Obj); // ?2
			return;
		case ObjType.DotNetRemoting_ConnectionAliveObject:
			Serialize((DotNetRemoting.ConnectionAliveObject)Obj); // ?2
			return;
		case ObjType.DotNetRemoting_GenericObject:
			Serialize((DotNetRemoting.GenericObject)Obj); // ?2
			return;
		}
		throw new Exception("SerialUnknown:failed");
	}

	object DeSerializeUnknown()
	{
		ObjType obType = (ObjType)BR.ReadByte();

		switch(obType)
		{
		case ObjType.ARRAY:
			return DeSerializeArray();
		case ObjType.System_Object:
			return DeSerializeUnknown();
        case ObjType.GENERIC:
            return DeSerializeGeneric();
		case ObjType.DotNetRemoting_status:
			return (DotNetRemoting.status)BR.ReadInt32();
		case ObjType.DotNetRemoting_commands:
			return (DotNetRemoting.commands)BR.ReadInt32();
		case ObjType.DotNetRemoting_stat_type:
			return (DotNetRemoting.stat_type)BR.ReadInt32();
		case ObjType.System_Collections_ArrayList:
		{
			System.Collections.ArrayList obj = new System.Collections.ArrayList();
			Deserialize(ref obj);
			return obj;
		}
		case ObjType.System_String:
			return (System.String)BR.ReadString();
		case ObjType.System_DateTime:
		{
			System.DateTime obj = new System.DateTime();
			Deserialize(ref obj);
			return obj;
		}
		case ObjType.System_Int32:
			return (System.Int32)BR.ReadInt32();
		case ObjType.DotNetRemoting_ComplexObject:
		{
			DotNetRemoting.ComplexObject obj = new DotNetRemoting.ComplexObject();
			Deserialize(ref obj); // ?4
			return obj;
		}
		case ObjType.System_Boolean:
			return (System.Boolean)BR.ReadBoolean();
		case ObjType.System_Byte:
			return (System.Byte)BR.ReadByte();
		case ObjType.DotNetRemoting_DrawingObject:
		{
			DotNetRemoting.DrawingObject obj = new DotNetRemoting.DrawingObject();
			Deserialize(ref obj); // ?4
			return obj;
		}
		case ObjType.DotNetRemoting_SerializerSetObject:
		{
			DotNetRemoting.SerializerSetObject obj = new DotNetRemoting.SerializerSetObject();
			Deserialize(ref obj); // ?4
			return obj;
		}
		case ObjType.DotNetRemoting_SyncCommsObject:
		{
			DotNetRemoting.SyncCommsObject obj = new DotNetRemoting.SyncCommsObject();
			Deserialize(ref obj); // ?4
			return obj;
		}
		case ObjType.DotNetRemoting_RpcObject:
		{
			DotNetRemoting.RpcObject obj = new DotNetRemoting.RpcObject();
			Deserialize(ref obj); // ?4
			return obj;
		}
		case ObjType.DotNetRemoting_ConnectionAliveObject:
		{
			DotNetRemoting.ConnectionAliveObject obj = new DotNetRemoting.ConnectionAliveObject();
			Deserialize(ref obj); // ?4
			return obj;
		}
		case ObjType.DotNetRemoting_GenericObject:
		{
			DotNetRemoting.GenericObject obj = new DotNetRemoting.GenericObject();
			Deserialize(ref obj); // ?4
			return obj;
		}
		}
		return null;
	}

   
}
}
